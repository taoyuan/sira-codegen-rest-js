"use strict";

var _ = require('lodash');
var rest = require('sira-express-rest');

module.exports = function (opts, type) {
    var classes = toRestClasses(opts.metadata);
    return {
        isNode: type === 'node',
        url: opts.url,
        moduleName: opts.moduleName,
        description: opts.description,
        resultful: !!opts.resultful,
        classes: classes.map(function (cls) {
            return specifyClass(cls, opts);
        })
    };
};

function toRestClasses(metadata) {
    if (Array.isArray(metadata) && metadata[0] instanceof rest.RestClass) return metadata;
    return rest.Rest.buildClasses(metadata);
}

function specifyClass(cls, opts) {
    var clazz = {
        moduleName: opts.moduleName,
        className: capitalizeFirst(cls.name),
        resultful: !!opts.resultful,
        path: cls.getPath(),
        respath: cls.ctor.getFullPath()
    };
    clazz.isUser = clazz.className.toLowerCase() === 'user';
    clazz.actions = cls.methods.map(function (method) {
        return specifyAction(method, clazz, opts);
    });
    return clazz;
}

function specifyAction(method, clazz, opts) {
    var action = {
        moduleName: clazz.moduleName,
        className: clazz.className,
        actionName: method.name,
        method: method.getHttpMethod(),
        path: method.getFullPath(),
        description: method.description,
        resultful: clazz.resultful,
        isUserLogin: clazz.isUser && method.name === 'login',
        isUserLogout: clazz.isUser && method.name === 'logout'
    };

    action.aliases = method.aliases || method.sharedMethod.aliases;
    action.returns = specifyReturns(method, clazz);

    var accepts = specifyAccepts(method, clazz);
    action.parameters = filter(accepts, 'paramType', {includes: ['default', 'query', 'path']});
    if (action.method === 'POST' || action.method === 'PUT') {
        action.payloads = filter(accepts, 'paramType', {excludes: ['default', 'query', 'path']});
    }

    return action;
}

function specifyAccepts(method, clazz) {
    var accepts = _.cloneDeep(method.accepts) || [];

    // Filter out parameters that are generated from the incoming request,
    // or generated by functions that use those resources.
    accepts = accepts.filter(function (accept) {
        if (!accept.http) return true;
        return typeof accept.http !== 'function' && (!accept.http.source || accept.http.source === 'body');
    });

    // Turn accept definitions in to parameter docs.
    accepts = accepts.map(acceptToParameter);

    return accepts;

}

function acceptToParameter(accept) {
    var name = accept.name || accept.arg;

    var paramType = 'default';
    if (accept.http && accept.http.source) {
        paramType = accept.http.source;
    }

    return {
        paramType: paramType,
        name: name,
        description: accept.description,
        type: accept.type,
        required: !!accept.required,
        defaultValue: accept.defaultValue,
        minimum: accept.minimum,
        maximum: accept.maximum
    };
}

function filter(arr, prop, filters) {
    filters = filters || {};
    var includes = toArray(filters.includes) || '*';
    var excludes = toArray(filters.excludes);
    arr.filter(function (item) {
        if (excludes && _.contains(excludes, item[prop])) return false;
        return !!(includes === '*' || _.contains(includes, item[prop]));
    });
}

function specifyReturns(method, clazz) {
    var returns = _.cloneDeep(method.returns) || [];

    if (returns.length === 0) {
        returns.push({ type: 'void' });
    }

    returns = returns.map(function (ret) {
        return {
            name: ret.name || ret.arg,
            root: ret.root,
            type: ret.type,
            isVoid: !ret.type || ret.type === 'void'
        };
    });

    returns.isRoot = returns.length === 1 && returns[0].root;
    returns.isArray = method.isReturningArray();

    return returns;
}

function toArray(v) {
    if (!v) return v;
    if (!Array.isArray(v)) return [v];
    return v;
}

function capitalizeFirst(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}